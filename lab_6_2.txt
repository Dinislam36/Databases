Query for task 2


SELECT city.city, total_inc.store_id, MAX(total_inc.income)
FROM 
(
	SELECT store.store_id, store.address_id, SUM(payment.amount) AS income
	FROM store
	JOIN staff 
	ON store.store_id = staff.store_id
	JOIN payment
	ON payment.staff_id = staff.staff_id
	WHERE EXTRACT(YEAR FROM payment.payment_date) = '2007' AND EXTRACT(MONTH FROM payment.payment_date)= '2'
	GROUP BY store.store_id, store.address_id
) AS total_inc
JOIN address ON total_inc.address_id = address.address_id
JOIN city ON city.city_id = address.city_id
GROUP BY city.city, total_inc.store_id



Output 


"Lethbridge"	1	4160.84
"Woodridge"	2	4191.00



EXPLAIN Output 


The most cost have sort query, we can improve it using tree index

"GroupAggregate  (cost=410.76..410.78 rows=1 width=45)"
"  Group Key: city.city, store.store_id"
"  ->  Sort  (cost=410.76..410.77 rows=1 width=45)"
"        Sort Key: city.city, store.store_id"
"        ->  Nested Loop  (cost=2.61..410.75 rows=1 width=45)"
"              ->  Nested Loop  (cost=2.33..410.40 rows=1 width=38)"
"                    ->  GroupAggregate  (cost=2.06..402.07 rows=1 width=38)"
"                          Group Key: store.store_id"
"                          ->  Nested Loop  (cost=2.06..402.05 rows=1 width=12)"
"                                Join Filter: (staff.staff_id = payment.staff_id)"
"                                ->  Merge Join  (cost=2.06..2.10 rows=2 width=10)"
"                                      Merge Cond: (store.store_id = staff.store_id)"
"                                      ->  Sort  (cost=1.03..1.03 rows=2 width=6)"
"                                            Sort Key: store.store_id"
"                                            ->  Seq Scan on store  (cost=0.00..1.02 rows=2 width=6)"
"                                      ->  Sort  (cost=1.03..1.03 rows=2 width=6)"
"                                            Sort Key: staff.store_id"
"                                            ->  Seq Scan on staff  (cost=0.00..1.02 rows=2 width=6)"
"                                ->  Materialize  (cost=0.00..399.93 rows=1 width=8)"
"                                      ->  Seq Scan on payment  (cost=0.00..399.92 rows=1 width=8)"
"                                            Filter: ((date_part('year'::text, payment_date) = '2007'::double precision) AND (date_part('month'::text, payment_date) = '2'::double precision))"
"                    ->  Index Scan using address_pkey on address  (cost=0.28..8.29 rows=1 width=6)"
"                          Index Cond: (address_id = store.address_id)"
"              ->  Index Scan using city_pkey on city  (cost=0.28..0.35 rows=1 width=13)"
"                    Index Cond: (city_id = address.city_id)"